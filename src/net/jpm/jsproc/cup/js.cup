
package net.jpm.jsproc.cup;
import java_cup.runtime.*;
import net.jpm.jsproc.lex.JSLexer;
import net.jpm.jsproc.Utilities;


/* Stuff enclosed in {: :} is copied verbatim to the class containing
all parser actions.  All the extra variables/functions you want to use
in the semantic actions should go here.  Don't remove or modify anything
that was there initially.  */

action code {: 

    int curr_lineno() {
    return ((JSLexer)parser.getScanner()).getCurrentLineNum();
    }

    String curr_filename() {
    return ((JSLexer)parser.getScanner()).getFileName();
    }
:} 

/************************************************************************/
/*                DONT CHANGE ANYTHING IN THIS SECTION                  */

parser code {:
    int omerrs = 0;

    
    public void syntax_error(Symbol cur_token) {
        int lineno = action_obj.curr_lineno();
        String filename = action_obj.curr_filename();
        System.err.print("\"" + filename + "\", line " + lineno + 
                ": parse error at or near ");
        Utilities.printToken(cur_token);
        omerrs++;
        if (omerrs>50) {
            System.err.println("More than 50 errors");
            System.exit(1);
        }
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
    }
:}

//Terminal definitions
//Identifier, variable/function name
terminal ID;

//Keywords
terminal FUNCTION, VAR, RETURN, THIS;
terminal IF, ELSE, SWITCH, CASE, DEFAULT, NEW, DELETE;
terminal TRY, CATCH, FINALLY, THROW;
terminal FOR, IN, DO, WHILE, BREAK, CONTINUE;
terminal NULL, UNDEFINED, TRUE, FALSE;
terminal INSTANCEOF, TYPEOF, VOID, WITH;






//literals
terminal NUMBER_CONST, REGEXP_CONST, STRING_CONST, BOOL_CONST;

//operators
terminal PLUS, MINUS, MULT, DIV, MOD, AND, OR, NOT;
terminal PLUSPLUS, MINUSMINUS;
terminal ASSIGN, EQ, EQQ, NEQ, NEQQ, LT, LE, GT, GE;
terminal CONDITIONAL;

terminal BIN_NOT, BIN_AND, BIN_OR, BIN_XOR;
terminal LSHIFT, RSHIFT, RSHIFT_ZERO;


terminal PLUS_EQ, MINUS_EQ, MULT_EQ, DIV_EQ, MOD_EQ; 
terminal LSHIFT_EQ, RSHIFT_EQ, RSHIFT_ZERO_EQ, AND_EQ, OR_EQ, XOR_EQ;





terminal DOT, COMMA, SEMI, COLON;
terminal LPAREN, RPAREN, LBRACE, RBRACE, LBRACKET, RBRACKET;

terminal ERROR;


/*  DON'T CHANGE ANYTHING ABOVE THIS LINE, OR YOUR PARSER WONT WORK       */
/**************************************************************************/

   /* Complete the nonterminal list below, giving a type for the semantic
      value of each non terminal. (See the CUP documentation for details. */

nonterminal String program;
nonterminal Classes class_list;
nonterminal class_c class;
nonterminal Features feature_list;
nonterminal Feature feature;
nonterminal attr attribute;
nonterminal method method_def;
nonterminal Formals formal_list;
nonterminal formalc formal;
nonterminal Expression expr;
nonterminal Expressions expression_list, arg_list;

nonterminal Expression let_expr, sub_let_expr, let_init;

nonterminal Cases case_list; 




/* Precedence declarations go here. */


precedence right NOT;
precedence nonassoc EQ, LE, LT;
precedence left PLUS, MINUS;
precedence left MULT, DIV;


precedence left DOT;


start with program;

program 
    ::= FUNCTION
        {: RESULT = "Program rule"; :}
        ;



    
    
    